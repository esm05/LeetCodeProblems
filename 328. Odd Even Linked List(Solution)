# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        # Split the linked list into even and odd indeces
        # Assign odd to the first element i.e. head (The odd pointer variable)
        # Assign even to next variable i.i head.next(The even pointer variable)
        # Assign evenHead to even b/c it is the start of the even list
        
        # Check if head is None
        if head ==  None: return None
        odd = head  
        even = head.next
        evenHead = even
        
       
        # Check if the elements after the heads are null
        while(even != None and even.next != None):
            # switch pointers to reflect the new order
            # 1(head/odd) -> 2(even/evenHead) -> 3 -> 4 -> 5 -> None
            odd.next = even.next
            # odd.next = 3
            # 1 -> 3
            # 2 ->
            odd = odd.next
            # odd = 3
            even.next = odd.next
            # even.next = 4
            # 1 -> 3
            # 2 -> 4
            even = even.next
            #even = 4
        odd.next = evenHead
        return head
